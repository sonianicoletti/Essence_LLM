[
  {
    "question": "What is the Essence standard by SEMAT?",
    "contexts": [
      "# Conclusion.\n- User stories are a favorite way to write requirements for a digital product\n- Product management comes to define user stories after a market analysis that includes characterizing _personae_ ideal users of the product\nSelf-assessment questions:\n- What does Humphrey's law assert?\n- What is a user requirement?\n- What is the standard form of user stories?\n- What is an epic?\n- What are the states of a requirement in the Essence model?",
      "# Essence Pocket Guide\nA quick introduction to Essence.\nEssence has alphas, work products, competencies, activities, patterns and resources.  \n## Introduction\nEssence is a standard for the creation, use and improvement of software engineering practices and methods, which is maintained and published by the OMG international open standards consortium.\nThe spirit of Essence is to concentrate on the essential information and to optimize both the technical and human aspects of engineering by providing super-lightweight practices, often distilled into a small handful of cards, that focus on outcomes and minimize production of documentation.\nAs an industry standard, Essence describes a language and a kernel for these engineering practices:\n• The Essence Language enables practices to be expressed in a simple and standard form that ensures that they can be easily shared, understood, and applied both independently and in combination with other Essence practices.\n• The Essence Kernel provides the common ground for defining these Essence practices. It includes the essential elements that are always central to every software engineering endeavor. The Kernel also helps practitioners compare practices and make informed decisions about which practices to adopt, and how to apply and adapt them."
    ],
    "num_contexts": 2
  },
  {
    "question": "What are the elements of the Essence language?",
    "contexts": [
      "# The Essence Kernel\nThe Essence kernel is the set of Essence elements that would always be found in all types of software system endeavours.\nFor instance, the element architecture was discussed as a kernel element.\n- The opinion was that while for many systems it is critical to identify an architecture there are many simpler systems where architecture is not an issue.\n- Since it is not common to all projects, architecture is not a concern that every endeavor has to face, it didn’t qualify as a kernel element.\nIn the following slides we will illustrate the elements that are part of Essence Kernel  \n## Areas of Concerns\nThe Essence kernel elements are organized around 3 areas of concerns, that we have already seen:\n- Customer: This area of concern contains everything to do with the actual use and exploitation of the software system to be produced.\n- Solution: This area of concern contains everything related to the specification and development of the software system.\n- Endeavor: This area of concern contains everything related to the development team and the way that they approach their work  \n## The Essence Kernel\nThe kernel elements are fundamentally of four kinds:\n1. The essential things to work with - the alphas\n2. The essential things to do - the activity spaces\n3. The essential capabilities needed - the competencies\n4. The essential arrangements of elements - the patterns.\n- Finding the right elements is crucial.\n- They must be universally acceptable, significant, relevant and guided by the notion that,\n“You have achieved perfection not when there is nothing left to add, but when there is nothing left to take away.”*",
      "# The Essence Language  \n## Essence Prime\nEssence provides a precise and actionable language to describe software engineering practices.\n- The constructs in the Essence language are in the form of shapes and icons.\n- The different shapes and icons each have different meaning.\nEssence categorizes the shapes and icons as:\n- Things to Work With\n- Things to Do\n- Competencies\nEssence provides explicit and actionable guidance.\n- This actionable guidance is delivered through associated checklists and guidelines.",
      "# Essence Language\nThese are the elements of ESSENCE LANGUAGE and their relationships\nEssentializing a Practice, means to describe a practice using the Essence language.  \nAlphas have an Alpha State.\nAlphas organize Work Products.\nAlpha States are progressed by Activity.\nWork Products describe Alphas, evidence Alpha States.\nActivities produce/update Work Products, result in Alpha States and require Competencies.\nActivity Spaces target Alpha States, organize Activities and involve Competencies.\nPatterns aren't connected to any specific Essence element but can be related to all of them."
    ],
    "num_contexts": 3
  },
  {
    "question": "What is the Essence standard used for?",
    "contexts": [
      "# Conclusion.\n- User stories are a favorite way to write requirements for a digital product\n- Product management comes to define user stories after a market analysis that includes characterizing _personae_ ideal users of the product\nSelf-assessment questions:\n- What does Humphrey's law assert?\n- What is a user requirement?\n- What is the standard form of user stories?\n- What is an epic?\n- What are the states of a requirement in the Essence model?",
      "# There is a standard Common Ground: Essence\nFor the first time in the 60+ year history of software engineering, we have got a Common Ground\nKernel + Language = Essence\nKernel has the essential things to work with, to do and competencies you need.\nThe Language is a visual language, it's simple and intuitive.\nEssence is the common ground."
    ],
    "num_contexts": 2
  },
  {
    "question": "What are the Alphas of the Essence Kernel?",
    "contexts": [
      "# Essence Kernel Alphas  \nThe Essence Kernel defines seven core, common Alphas for software engineering, which together:  \nCapture the key concepts involved in software engineering\nAllow the progress and health of any software endeavor to be tracked and assessed\nProvide common ground for the definition of software engineering practices.  \nNote that the Kernel Alphas each belong in one of the three Areas of Concern and are color-coded accordingly."
    ],
    "num_contexts": 1
  },
  {
    "question": "What are the Kernel Competencies?",
    "contexts": [
      "# Activity  \nAn Activity is the doing of some work by one or more people, for example in a workshop or meeting, or as an individual, pair or larger group collaboration. Examples might include Daily Stand-Up Meeting, Backlog Refinement or Develop a Component.  \nActivities are what we do. Activities are important because, unless we collectively actually do something (successfully), nothing is ever achieved or produced.  \nA good Activity description will include guidance on:\n- What outcomes the Activity produces or achieves\n- What we should do to achieve these outcomes\n- What kinds of Competencies at what Levels are needed to undertake the activity successfully.  \n## Activity Space  \nAn Activity Space is a placeholder for something to be done in an endeavor, such as to Understand the Requirements.  \nThe Essence Kernel defines a number of Activity Spaces that together represent the kinds of things that we need to do to progress any software engineering endeavor.  \nActivity Spaces can be used to group together related Activities that different Practices define.",
      "# The Competencies\nDef. Competenciesare generic containers for specific skills\n- Specific skills, for example Java programming, are not part of the kernel because this skill is not essential on all software engineering endeavours.\n- But competency is always required and it will be up to the individual teams to identify the specific skills needed for their particular software endeavour.\nA common problem on software endeavours is not being aware of the gap between the competencies needed and the competencies available.\n- The kernel approach will raise the visibility of this gap.  \n## Competencies in Essence Kernel Standard\nCompetencies are aligned to the three focus areas.\nEssence Kernel Standard competencies are needed for any Software Engineering Endeavour, independently then methods and techniques adopted.\nCompetencies for the Customer area of concern are: Stakeholder Representation.\nCompetencies for the Solution area of concern are: Analysis, Development, Testing.\nCompetencies for the Endeavor area of concern are: Leadership, Management.  \n## Competencies Essence Standard Desc.\nCustomer:\n- Stakeholder Representation: This competency encapsulates the ability to gather, communicate, and balance the needs of other stakeholders, and accurately represent their views.\nSolution:\n- Analysis: this competency encapsulates the ability to understand opportunities and their related stakeholder needs, and to transform them into an agreed upon and consistent set of requirements.\n- Development: This competency encapsulates the ability to design, program and code effective and efficient software systems following the standards and norms agreed upon by the team.\n- Testing: This competency encapsulates the ability to test a system, verify that it is usable and that it meets the requirements.\nEndeavour:\n- Leadership: This competency enables a person to inspire and motivate a group of people to achieve a successful conclusion to their work and to meet their objectives.\n- Management: This competency encapsulates the ability to coordinate, plan and track the work done by a team"
    ],
    "num_contexts": 2
  },
  {
    "question": "What are the states of the Work alpha?",
    "contexts": [
      "# Conclusion.\n- User stories are a favorite way to write requirements for a digital product\n- Product management comes to define user stories after a market analysis that includes characterizing _personae_ ideal users of the product\nSelf-assessment questions:\n- What does Humphrey's law assert?\n- What is a user requirement?\n- What is the standard form of user stories?\n- What is an epic?\n- What are the states of a requirement in the Essence model?",
      "# Work Alpha State cards  \nTitle: Work Alpha\nDescription: Activity involving mental or physical effort done in order to achieve a result.\nStates: Initiated, Prepared, Started, Under Control, Concluded, Closed.  \nTitle: Work State 1\nState: Initiated\nDescription: The work has been requested.\nChecklist: Required result clear, Constraints clear, Funding stakeholders known, Initiator identified, Accepting stakeholders known, Source of funding clear, Priority clear  \nTitle: Work State 2\nState: Prepared\nDescription: All pre-conditions for starting the work have been met.\nChecklist: Commitment made, Cost and effort estimated, Resource availability understood, Risk exposure understood, Acceptance criteria established, Sufficiently broken down to start, Tasks identified and prioritized, Credible plan in place, Funding in place, At least one team member ready, Integration points defined  \nTitle: Work State 3\nState: Started\nDescription: The work is proceeding.\nChecklist: Development started, Progress monitored, Definition of done in place, Tasks being progressed  \nTitle: Work State 4\nState: Under Control\nDescription: The work is going well, risks are under control, and productivity levels are sufficient to achieve a satisfactory result.\nChecklist: Tasks being completed, Unplanned work under control, Risks under control, Estimates revised to reflect performance, Progress measured, Re-work under control, Commitments consistently met  \nTitle: Work State 5\nState: Concluded\nDescription: The work to produce the results has been concluded.\nChecklist: Only admin tasks left, Results achieved, Resulting system accepted  \nTitle: Work State 6\nState: Closed\nDescription: All remaining housekeeping tasks have been completed and the work has been officially closed.\nChecklist: Lessons learned, Metrics available, Everything archived, Budget reconciled & closed, Team released, No outstanding, uncompleted tasks"
    ],
    "num_contexts": 2
  },
  {
    "question": "What are the Activity Spaces in the Customer Area of Concern?",
    "contexts": [
      "# Activity  \nAn Activity is the doing of some work by one or more people, for example in a workshop or meeting, or as an individual, pair or larger group collaboration. Examples might include Daily Stand-Up Meeting, Backlog Refinement or Develop a Component.  \nActivities are what we do. Activities are important because, unless we collectively actually do something (successfully), nothing is ever achieved or produced.  \nA good Activity description will include guidance on:\n- What outcomes the Activity produces or achieves\n- What we should do to achieve these outcomes\n- What kinds of Competencies at what Levels are needed to undertake the activity successfully.  \n## Activity Space  \nAn Activity Space is a placeholder for something to be done in an endeavor, such as to Understand the Requirements.  \nThe Essence Kernel defines a number of Activity Spaces that together represent the kinds of things that we need to do to progress any software engineering endeavor.  \nActivity Spaces can be used to group together related Activities that different Practices define.",
      "# Fig. 2. Activity Spaces against area of concerns\n- **Customer**\n- Explore Possibilities\n- Understand Stakeholder Needs\n- Ensure Stakeholder Satisfaction\n- Use the System\n- **Solution**\n- Understand the Requirements\n- Shape the System\n- Implement the System\n- Test the System\n- Deploy the System\n- Operate the System\n- **Endeavour**\n- Prepare to do the Work\n- Coordinate Activity\n- Support the Team\n- Track Progress\n- Stop the Work  \n---",
      "# 1.1.1.2 Activity spaces:\nActivity spaces represent placeholders for the essential activities in software\nengineering endeavours. Each activity space has a set\nof objectives and is related to certain kernel alphas\nwhich are required to achieve. Activity Spaces describes\nthe challenges a team may face while development and\nmaintenance of software systems. Moreover, activity\nspaces define the things that will required to complete\nthem. Further, they balance the alphas and present an\nactivity-based vision on software engineering. Activity\nspaces against area of concerns are shown in Fig. 2.  \n---"
    ],
    "num_contexts": 3
  },
  {
    "question": "What are the checklist items of the User Story \"Identified\" Alpha State card?",
    "contexts": [
      "# Alphas\nAn Alpha is a key aspect or element that we need to progress, the state of which is a key indicator of the overall progress and health of an endeavor. Examples might include a User Story being progressed to a Done state or a Team achieving a state of Performing.\nAlphas are what we progress. These are of central importance in Essence because they ensure we remain focused on the valuable outcomes we are trying to achieve, not on secondary concerns such as what physical documents or other artefacts may or may not help us to achieve these outcomes.\nIt progresses through a number of states, from top to bottom, as shown in this example of a User Story.  \n### Alpha States\nA State is a specification of the state of progress of an Alpha. Examples might include a User Story Alpha being\nin a State of Identified or an Impediment being Resolved.\nAlpha States can in turn be concisely and accurately defined in terms of the set Checklist Items that need to be achieved for the state to be achieved.\nIn this example, the Identified State of a User Story Alpha might have these 3 Checklist Items that should be satisfied before it can be considered in that State.\nThese Checklist Items can be used both as a way to assess whether an item is in this state, or considered as a set of “To Dos” to achieve it.",
      "# Alpha State Cards  \nThis a list of all the Essence Kernel Alpha cards.  \nEach card has:\n- a title\n- a brief description (optional)\n- a list of states (optional)\n- a state (optional)\n- a checklist (optional)"
    ],
    "num_contexts": 2
  },
  {
    "question": "What is Mad Sad Glad?",
    "contexts": [
      "# Restrospective Essence cards - Patterns  \nTitle: Feedback\nDescription: Feedback patterns establish mechanisms for assessing performance and adjusting the approach based on these assessments.  \nTitle: Mad, Sad, Glad\nDescription: A popular approach to team brainstorming to identify potential improvements.\nTeam members write on sticky notes what has made them:\nMad – frustrations\nSad – disappointments\nGlad – things that went well\nPart of its power is that it taps into people’s emotions, and results in an unfettered flow of ideas that the team can then analyze, prioritize and action.\nOne approach to: Hold a Retrospective\nPatterns: Feedback gorups Mad, Sad, Glad",
      "# MAD, SAD, GLAD (Pattern of Retrospective Practice)  \nA (serious) game to play during retrospectives.  \nSource: Agile Retrospectives\nEster Darby\nTags: ???\nData Gathering Technique  \n## Participants:\n- 7 + or – 2 team members\n- A facilitator (could be team member)\n- A customer rep/product owner  \n## Equipment:\n- Sticky Notes  \n## Basic instructions of Mad Sad Glad:\n1. Facilitator asks group to each write down on sticky notes at least 1 or 2 issues that made them feel GLAD, MAD, and SAD during the previous Sprint\n2. Facilitator create headings for MAD, SAD, GLAD on whiteboard\n3. Team members place sticky notes under appropriate area\n4. Facilitator clusters common sticky notes. Facilitator asked group to name each cluster\n6. Group agrees on top 2-3 areas for further discussion/insight generation  \n## Description:\nA simple technique that enables a team to quickly gather data about potential issues to resolve.  \n## Use when:\n- During a retrospective\n- After review of how we did addressing issues from last retrospective\n- To generate issues for discussion/insight generation\n- Limit to 15-20 minutes  \n## Applied to:\n- Sprint retrospective  \n## Applied By:\n- Team  \n## Related To:\n- 5 Whys  \n## Resources:\n- None"
    ],
    "num_contexts": 2
  },
  {
    "question": "What are the steps of Progress Poker?",
    "contexts": [
      "# Conclusions.\n- Waterfall processes: planned, rigid\n- Iterative processes: planned, flexible\n- Agile processes: unplanned, adaptive\n- There are many variations\n- Each organization defines the model it prefers, possibly adapting it for\nclasses of products or software projects\nSelf-testing:\n- What is a software process?\n- What are the typical steps in the development process?\n- What are the main differences between linear processes\nand iterative processes?\n- How do you recognize a waterfall process?\n- What are the main performance indicators of\nsoftware process?",
      "# Alpha State Card Game: Progress Poker\n## Object of Play\nTeam members may have different opinions on where they are, or where they need to go next. The idea behind Progress Poker is simple. Individual Alphas are presented for assessment. After a period of discussion, each participant chooses from his or her own deck the numbered card that represents his or her estimate of the state that the Alpha is currently in. All estimates are kept private until each participant has chosen a card. At that time, all estimates are revealed and discussion can begin again.\nUse this game to determine the state of any particular Alpha.\n## Variations\nThe game can also be played with only one set of cards:\n1) Lay the state cards for the Alpha under consideration out on the table, in order, in front of the players.\n2) Each player considers the set of states and identifies the state that they believe the Alpha to be in.\n3) The players then simultaneously raise their hands with the correct number of fingers raised to indicate the state they have selected. A closed fist is used to indicate the sixth state.\n4) If all players have selected the same state card then there is consensus.\n5) If the selected cards are different then the players with the least and most advanced states explain their reasoning.\n6) Repeat from 3 until consensus emerges\nOr without the cards at all. As for the previous variation but in this case each player has a copy of the Reference Guide to consult when identifying the appropriate state.\n## Number of Players\nAny, but typically teams of 3 to 9 will be the most effective.\n## Equipment Needed\n- Essential: 1 set of Alpha State Cards for each player\n- Optional: An Alpha State Card Reference Guide\n## Duration of Play\n2 – 10 minutes.\n## How to Play\n1. Each player is given a set of state cards for the Alpha under consideration.\n2. The Alpha card for the Alpha under consideration is placed in the center of the table.\n3. Each player selects the state card that he or she thinks best represents the current state of the Alpha.\n4. All members put their selected state card face down on the table.\n5. When all are ready, they turn the state card face up.\nIf all players have selected the same state card then there is consensus.\n7. If the selected cards are different then the players with the least and most advanced states explain their reasoning.\n8. Repeat from 3 until consensus emerges\nOptional step: @ state 6 then the players might want to consider the full checklists found in the Reference Guide.\n## Strategy\nProgress Poker is a good way to come to a consensus without spending too much time on any one topic. It allows, or forces, people to voice their opinions, thoughts and concerns. Pick the Alphas of concern to the group and focus on them. This game can be used in conjunction with “Chase the State” to determine the overall state of any software development effort. Once the current state of an Alpha is known then the next state to be achieved is obvious."
    ],
    "num_contexts": 2
  }
]